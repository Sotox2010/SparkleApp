package com.jesussoto.android.sparkle;

import android.annotation.TargetApi;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.Outline;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewOutlineProvider;

import com.jesussoto.android.sparkle.widget.FloatingLabelEditText;
import com.jesussoto.android.sparkle.widget.FloatingLabelSpinner;

import java.util.ArrayList;
import java.util.Arrays;


public class MainActivity extends ActionBarActivity {

    public static final String LOG_TAG = MainActivity.class.getSimpleName();

    public static final String[] RESULT_FORMATS = {
            "RDF/XML",
            "RDF/XML-ABBREV",
            "RDF/JSON",
            "TURTLE",
            "N-TRIPLES",
            "N3",
            "Plain Text"
    };

    /**
     * Queries for synthetic data generated by LUBM.
     */
    /*public static final String[] QUERIES = {
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT ?X WHERE { ?X rdf:type ub:GraduateStudent . ?X ub:takesCourse <http://www.Department0.University0.edu/GraduateCourse0> . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT ?X ?Y ?Z WHERE { ?X rdf:type ub:GraduateStudent . ?Y rdf:type ub:University . ?Z rdf:type ub:Department . ?X ub:memberOf ?Z . ?Z ub:subOrganizationOf ?Y . ?X ub:undergraduateDegreeFrom ?Y . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT ?X WHERE { ?X rdf:type ub:Publication . ?X ub:publicationAuthor <http://www.Department0.University0.edu/AssistantProfessor0> . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT ?X ?Y1 ?Y2 ?Y3 WHERE { ?X rdf:type ub:Professor . ?X ub:worksFor <http://www.Department0.University0.edu> . ?X ub:name ?Y1 . ?X ub:emailAddress ?Y2 . ?X ub:telephone ?Y3 . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT * WHERE { ?x rdf:type ub:Person . ?x ub:memberOf <http://www.Department0.University0.edu> . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT * WHERE { ?x rdf:type ub:Student . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT * WHERE { ?x rdf:type ub:Student . ?y rdf:type ub:Course . <http://www.Department0.University0.edu/AssociateProfessor0> ub:teacherOf ?y . ?x ub:takesCourse ?y . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT * WHERE { ?x rdf:type ub:Student . ?y rdf:type ub:Department . ?x ub:memberOf ?y . ?y ub:subOrganizationOf <http://www.University0.edu> . ?x ub:emailAddress ?z . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT * WHERE { ?x rdf:type ub:Student . ?y rdf:type ub:Faculty . ?z rdf:type ub:Course . ?x ub:advisor ?y . ?x ub:takesCourse ?z . ?y ub:teacherOf ?z . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT * WHERE { ?x rdf:type ub:Student . ?x ub:takesCourse <http://www.Department0.University0.edu/GraduateCourse0> . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT * WHERE { ?x rdf:type ub:ResearchGroup . ?x ub:subOrganizationOf <http://www.University0.edu> . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT * WHERE { ?x rdf:type ub:Chair . ?y rdf:type ub:Department . ?x ub:worksFor ?y . ?y ub:subOrganizationOf <http://www.University0.edu> . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT * WHERE { ?x rdf:type ub:Person . <http://www.University0.edu> ub:hasAlumnus ?x . }",
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#> SELECT * WHERE { ?x rdf:type ub:UndergraduateStudent . }"
    };*/


    /**
     * Queries for real data with DBpedia dataset #1.
     */
    public static final String[] QUERIES = {
            "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> SELECT ?subject ?lat ?long WHERE { <http://dbpedia.org/resource/Eiffel_Tower_(Paris,_Tennessee)> geo:lat ?eiffelLat.  <http://dbpedia.org/resource/Eiffel_Tower_(Paris,_Tennessee)> geo:long ?eiffelLong.  ?subject geo:lat ?lat.  ?subject geo:long ?long.  FILTER(xsd:double(?lat) - xsd:double(?eiffelLat) <= 0.05 &&    xsd:double(?eiffelLat) - xsd:double(?lat) <= 0.05 &&    xsd:double(?long) - xsd:double(?eiffelLong) <= 0.05 &&    xsd:double(?eiffelLong) - xsd:double(?long) <= 0.05) . }",
            "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> SELECT ?subject ?lat ?long WHERE {  <http://dbpedia.org/resource/Brandenburg_Gate> geo:lat ?brandenburgLat.  <http://dbpedia.org/resource/Brandenburg_Gate> geo:long ?brandenburgLong.  ?subject geo:lat ?lat.  ?subject geo:long ?long.  FILTER(xsd:double(?lat) - xsd:double(?brandenburgLat) <= 0.05 &&    xsd:double(?brandenburgLat) - xsd:double(?lat) <= 0.05 &&    xsd:double(?long) - xsd:double(?brandenburgLong) <= 0.05 &&    xsd:double(?brandenburgLong) - xsd:double(?long) <= 0.05  ). }",
            "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> SELECT ?subject ?lat ?long WHERE {  <http://dbpedia.org/resource/Taj_Mahal_Bangladesh> geo:lat ?tajmahalLat.  <http://dbpedia.org/resource/Taj_Mahal_Bangladesh> geo:long ?tajmahalLong.  ?subject geo:lat ?lat.  ?subject geo:long ?long.  FILTER(xsd:double(?lat) - xsd:double(?tajmahalLat) <= 0.025 &&    xsd:double(?tajmahalLat) - xsd:double(?lat) <= 0.025 &&    xsd:double(?long) - xsd:double(?tajmahalLong) <= 0.025 &&    xsd:double(?tajmahalLong) - xsd:double(?long) <= 0.025  ) . }",
            "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> SELECT ?subject ?lat ?long WHERE {  <http://dbpedia.org/resource/White_House_Peace_Vigil> geo:lat ?houseLat.  <http://dbpedia.org/resource/White_House_Peace_Vigil> geo:long ?houseLong.  ?subject geo:lat ?lat.  ?subject geo:long ?long.  FILTER(xsd:double(?lat) - xsd:double(?houseLat) <= 0.1 &&    xsd:double(?houseLat) - xsd:double(?lat) <= 0.1 &&    xsd:double(?long) - xsd:double(?houseLong) <= 0.1 &&    xsd:double(?houseLong) - xsd:double(?long) <= 0.1  ).}",
            "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> SELECT ?subject ?lat ?long WHERE {  <http://dbpedia.org/resource/Angel_Falls_(Maine)> geo:lat ?fallsLat.  <http://dbpedia.org/resource/Angel_Falls_(Maine)> geo:long ?fallsLong.  ?subject geo:lat ?lat.  ?subject geo:long ?long.  FILTER(xsd:double(?lat) - xsd:double(?fallsLat) <= 10 &&    xsd:double(?fallsLat) - xsd:double(?lat) <= 10 &&    xsd:double(?long) - xsd:double(?fallsLong) <= 10 &&    xsd:double(?fallsLong) - xsd:double(?long) <= 10  ).}"
    };


    /**
     * Queries for real data with DBpedia dataset #2.
     */
    /*public static final String[] QUERIES = {
            "SELECT ?p ?o WHERE { <http://dbpedia.org/resource/Metropolitan_Museum_of_Art> ?p ?o }",
            "PREFIX p: <http://dbpedia.org/property/> SELECT ?film1 ?actor1 ?film2 ?actor2 WHERE { ?film1 p:starring <http://dbpedia.org/resource/Kevin_Bacon> . ?film1 p:starring ?actor1 . ?film2 p:starring ?actor1 . ?film2 p:starring ?actor2 . }",
            "PREFIX p: <http://dbpedia.org/property/> SELECT ?artist ?artwork ?museum ?director WHERE { ?artwork p:artist ?artist . ?artwork p:museum ?museum . ?museum p:director ?director . }",
            "PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> SELECT ?s ?homepage WHERE { <http://dbpedia.org/resource/Berlin> geo:lat ?berlinLat . <http://dbpedia.org/resource/Berlin> geo:long ?berlinLong . ?s geo:lat ?lat . ?s geo:long ?long . ?s foaf:homepage ?homepage . FILTER (?lat <= ?berlinLat + 0.03190235436 && ?long >= ?berlinLong - 0.08679199218 && ?lat >= ?berlinLat - 0.03190235436 && ?long <= ?berlinLong + 0.08679199218) }",
            "PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX p: <http://dbpedia.org/property/> SELECT ?s ?a ?homepage WHERE { <http://dbpedia.org/resource/New_York_City> geo:lat ?nyLat . <http://dbpedia.org/resource/New_York_City> geo:long ?nyLong . ?s geo:lat ?lat . ?s geo:long ?long . ?s p:architect ?a . ?a foaf:homepage ?homepage . FILTER (?lat <= ?nyLat + 0.3190235436 && ?long >= ?nyLong - 0.8679199218 && ?lat >= ?nyLat - 0.3190235436 && ?long <= ?nyLong + 0.8679199218) }"
    };*/



    public static final ArrayList<Long> sDownloadIds =  new ArrayList<>();

    static final int MSG_SAY_HELLO = 1;
    static final int MSG_EXECUTE_QUERY = 2;
    static final int MSG_EXECUTE_QUERY_FOR_DOWNLOAD = 3;
    static final int MSG_DUMP = 4;
    static final int MSG_DOWNLOAD_RESULT = 5;

    static final int MSG_DELIVER_RESULT = 1;
    static final int MSG_ERROR = 2;
    static final int MSG_DELIVER_RESULT_METADATA = 3;
    static final int MSG_DELIVER_DOWNLOAD_ID = 4;

    static final String ARG_ENDPOINT_URL = "arg_endpoint_url";
    static final String ARG_FORMAT = "arg_format";
    static final String ARG_SPARQL_QUERY = "arg_sparql_query";
    static final String ARG_RESULT_METADATA = "arg_result_metadata";

    static final String DATA_QUERY_RESULT= "data_query_result";
    static final String DATA_QUERY_RESULT_METADATA = "data_query_result_metadata";
    static final String DATA_ERROR_MESSAGE = "data_error_message";
    static final String DATA_DOWNLOAD_ID = "data_download_id";

    private Toolbar mToolbarActionBar;
    private FloatingLabelEditText mEndpointUrlView;
    private FloatingLabelEditText mSparqlQueryView;
    private FloatingLabelSpinner mFormatSpinner;
    private Boolean mDownloadResult = false;

    /** Messenger for communicating with the service. */
    Messenger mService = null;

    /** Flag indicating whether we have called bind on the service. */
    boolean mBound;

    /**
     * Handler for Service response messages.
     */
    class ResponseHandler extends Handler {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case MSG_DELIVER_RESULT: {
                    processQueryResult(msg);
                    break;
                }
                case MSG_DELIVER_RESULT_METADATA: {
                    processQueryResultMetadata(msg);
                    break;
                }
                case MSG_DELIVER_DOWNLOAD_ID: {
                    processDownloadId(msg);
                    break;
                }
                case MSG_ERROR: {
                    Bundle result = msg.getData();
                    Log.e(LOG_TAG, "MSG_ERROR");
                    Log.e(LOG_TAG, result.getString(DATA_ERROR_MESSAGE, "null"));
                    break;
                }
                default:
                    super.handleMessage(msg);
            }
        }
    }

    private Messenger mMessenger = new Messenger(new ResponseHandler());

    /**
     * Class for interacting with the main interface of the service.
     */
    private ServiceConnection mConnection = new ServiceConnection() {
        public void onServiceConnected(ComponentName className, IBinder service) {
            // This is called when the connection with the service has been
            // established, giving us the object we can use to
            // interact with the service.  We are communicating with the
            // service using a Messenger, so here we get a client-side
            // representation of that from the raw IBinder object.
            mService = new Messenger(service);
            mBound = true;
        }

        public void onServiceDisconnected(ComponentName className) {
            // This is called when the connection with the service has been
            // unexpectedly disconnected -- that is, its process crashed.
            mService = null;
            mBound = false;
        }
    };

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        mToolbarActionBar = (Toolbar) findViewById(R.id.toolbar_actionbar);
        setSupportActionBar(mToolbarActionBar);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mEndpointUrlView = (FloatingLabelEditText) findViewById(R.id.endpoint_url);
        mFormatSpinner = (FloatingLabelSpinner) findViewById(R.id.format_spinner);
        mSparqlQueryView = (FloatingLabelEditText) findViewById(R.id.sparql_query);

        View executeQueryFab = findViewById(R.id.execute_fab);
        executeQueryFab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mDownloadResult) {
                    sendExecuteQueryForDownloadMessage();
                } else {
                    sendExecuteQueryMessage();
                }
            }
        });

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            executeQueryFab.setOutlineProvider(new ViewOutlineProvider() {
                @TargetApi(Build.VERSION_CODES.LOLLIPOP)
                @Override
                public void getOutline(View view, Outline outline) {
                    outline.setOval(0, 0, view.getWidth(), view.getHeight());
                }
            });
        }

        FloatingLabelSpinnerAdapter<String> adapter =
                new FloatingLabelSpinnerAdapter<String>(this, Arrays.asList(RESULT_FORMATS));

        mFormatSpinner.setAdapter(adapter);
    }

    @Override
    protected void onStart() {
        super.onStart();
        // Bind to Sparkle service.
        Intent intent = new Intent("com.jesussoto.android.sparkleservice.action.BIND");
        intent.setPackage("com.jesussoto.android.sparkleservice");
        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
    }

    @Override
    protected void onStop() {
        super.onStop();
        // Unbind from the service.
        if (mBound) {
            unbindService(mConnection);
            mBound = false;
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        //getMenuInflater().inflate(R.menu.menu_lubm, menu);
        //getMenuInflater().inflate(R.menu.menu_dbpedia_set1, menu);
        getMenuInflater().inflate(R.menu.menu_dbpedia_set2, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.

        switch (item.getItemId()) {
            case R.id.action_example_1:
                mSparqlQueryView.setText(QUERIES[0]);
                return true;
            case R.id.action_example_2:
                mSparqlQueryView.setText(QUERIES[1]);
                return true;
            case R.id.action_example_3:
                mSparqlQueryView.setText(QUERIES[2]);
                return true;
            case R.id.action_example_4:
                mSparqlQueryView.setText(QUERIES[3]);
                return true;
            case R.id.action_example_5:
                mSparqlQueryView.setText(QUERIES[4]);
                return true;
            /*case R.id.action_example_6:
                mSparqlQueryView.setText(QUERIES[5]);
                return true;
            case R.id.action_example_7:
                mSparqlQueryView.setText(QUERIES[6]);
                return true;
            case R.id.action_example_8:
                mSparqlQueryView.setText(QUERIES[7]);
                return true;
            case R.id.action_example_9:
                mSparqlQueryView.setText(QUERIES[8]);
                return true;
            case R.id.action_example_10:
                mSparqlQueryView.setText(QUERIES[9]);
                return true;
            case R.id.action_example_11:
                mSparqlQueryView.setText(QUERIES[10]);
                return true;
            case R.id.action_example_12:
                mSparqlQueryView.setText(QUERIES[11]);
                return true;
            case R.id.action_example_13:
                mSparqlQueryView.setText(QUERIES[12]);
                return true;
            case R.id.action_example_14:
                mSparqlQueryView.setText(QUERIES[13]);
                return true;*/
            case R.id.action_download_checkbox:
                mDownloadResult =  !mDownloadResult;
                item.setChecked(mDownloadResult);
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }

    }

    private void sendExecuteQueryMessage() {
        if (!mBound) return;

        Bundle args = new Bundle();
        args.putString(ARG_ENDPOINT_URL, mEndpointUrlView.getText().toString());
        args.putInt(ARG_FORMAT, mFormatSpinner.getSelectedItemPosition());
        args.putString(ARG_SPARQL_QUERY, mSparqlQueryView.getText().toString());

        Message msg = new Message();
        msg.what = MSG_EXECUTE_QUERY;
        msg.replyTo = mMessenger;
        msg.setData(args);

        try {
            mService.send(msg);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    private void sendExecuteQueryForDownloadMessage() {
        if (!mBound) return;

        Bundle args = new Bundle();
        args.putString(ARG_ENDPOINT_URL, mEndpointUrlView.getText().toString());
        args.putInt(ARG_FORMAT, mFormatSpinner.getSelectedItemPosition());
        args.putString(ARG_SPARQL_QUERY, mSparqlQueryView.getText().toString());

        Message msg = new Message();
        msg.what = MSG_EXECUTE_QUERY_FOR_DOWNLOAD;
        msg.replyTo = mMessenger;
        msg.setData(args);

        try {
            Log.e(LOG_TAG, "REQUEST SENT TIME: " + System.currentTimeMillis());
            mService.send(msg);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    private void sendDownloadQueryResultMessage(String metadata) {
        if (!mBound) return;

        Bundle args = new Bundle();
        args.putString(ARG_RESULT_METADATA, metadata);

        Message msg = new Message();
        msg.what = MSG_DOWNLOAD_RESULT;
        msg.replyTo = mMessenger;
        msg.setData(args);

        try {
            mService.send(msg);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    private void processQueryResult(Message msg) {
        Bundle result = msg.getData();

        Log.i(LOG_TAG, "MSG_DELIVER_RESULT");
        Log.i(LOG_TAG, result.getString(DATA_QUERY_RESULT));

        Intent intent = new Intent(MainActivity.this, ResultsActivity.class);
        intent.putExtra(ResultsActivity.EXTRA_RESULT, result.getString(DATA_QUERY_RESULT));
        startActivity(intent);
    }

    private void  processQueryResultMetadata(Message msg) {
        Bundle data = msg.getData();
        String metadata = data.getString(DATA_QUERY_RESULT_METADATA);

        Log.i(LOG_TAG, "MSG_DELIVER_RESULT_METADATA");
        Log.i(LOG_TAG, metadata);

        sendDownloadQueryResultMessage(metadata);
    }

    private void processDownloadId(Message msg) {
        Bundle data = msg.getData();
        long downloadId = data.getLong(DATA_DOWNLOAD_ID, -1);

        Log.i(LOG_TAG, "MSG_DELIVER_DOWNLOAD_ID");
        Log.i(LOG_TAG, "DATA_DOWNLOAD_ID = " + downloadId);
        Log.d(LOG_TAG, "DOWNLOAD STARTED: " + System.currentTimeMillis());

        if (downloadId != -1) {
            sDownloadIds.add(downloadId);
        }
    }
}
